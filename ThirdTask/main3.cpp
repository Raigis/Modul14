// Задание 3. Матрицы
// Требуется реализовать небольшую программу для сравнения двух двумерных матриц размером 4 × 4 на предмет их полного равенства. 
// Если матрицы равны друг другу, необходимо взять одну из матриц и привести её к диагональному виду. 
// Программа принимает на вход две целочисленные матрицы A и B, которые вводятся с помощью std::cin, и сравнивает их на предмет полного равенства. 
// Если матрицы равны, то об этом сообщается в стандартном выводе. Алгоритм должен быть по возможности оптимальным и не проводить лишних операций. 
// Если матрицы не равны, выводится соответствующее сообщение и выполнение программы прекращается. 
// Если матрицы равны, то из них выбирается одна и преобразуется в диагональную. 
// Конвертация в диагональную форму делается путём простейшего зануления всех элементов, лежащих вне главной диагонали. 
// Напомню, что диагональная матрица — это такая матрица, у которой все элементы вне диагонали равны нулю. 
// Диагональ матрицы, в свою очередь, — это все элементы, расположенные по диагонали от первого элемента первой строки до последнего элемента последней строки. 
// Итоговую диагональную матрицу можно расположить на месте прежней матрицы, не используя дополнительных переменных. Результат преобразования требуется вывести в консоль для проверки. 
// Ищите именно оптимальное решение, оно довольно простое.

#include <iostream>

void input(int matrix[][4], std::string text) {
    std::cout << "Enter the " << text << " matrix:\n";
    for (int i = 0; i < 4; i++) {
        std::cout << "\tEnter the " << 1+i << " row of 4 numbers:\n\t";
        std::cin >> matrix[i][0] >> matrix[i][1] >> matrix[i][2] >> matrix[i][3];
    }
    std::cout << std::endl;
}

bool comparison(int FM[][4], int SM[][4]){
    for (int i = 0; i < 4; i++) {
        if (FM[i][0] != SM [i][0] || FM[i][1] != SM [i][1] || FM[i][2] != SM [i][2] || FM[i][3] != SM [i][3]) {
            std::cout << "The matrices are not equal!";
            return false;
        }
    }
    std::cout << "The matrices are equal!\n\n";
    return true;
}

void print(int matrix[][4]) {
    std::cout << "Diagonal matrix:\n";
    for (int i = 0; i < 4; i++) {
        std::cout << matrix[i][0] << " " << matrix[i][1] << " " << matrix[i][2] << " " << matrix[i][3] << std::endl;
    }
}

void diagonalization(int matrix[][4]) {
    for(int i = 0; i < 4; i++) {
        for(int j = 0; j < 4; j++) {
            if (i != j) matrix[i][j] = 0;
        }
    }
    print(matrix);
}

int main() {
    int firstMatrix[4][4], secondMatrix[4][4];
    input(firstMatrix, "first");
    input(secondMatrix, "second");
    if (comparison(firstMatrix, secondMatrix)){
        diagonalization(firstMatrix);
    }
    return 0;
}