// Задание 2. Крестики-нолики
// Что нужно сделать
// Старая добрая игра на страницах всех школьных тетрадей. 
// Поле размером 3 × 3 представлено в виде двумерного массива с типом элементов char. 
// Участвуют два игрока, они ходят по очереди и ставят в указанные ими в стандартном вводе координаты свой символ — X или O (буквы латинского алфавита). 
// Как только у одного из игроков будет установлено подряд три крестика или три нолика, он побеждает. 
// Если свободных клеток не осталось, а трёх совпадающих элементов не найдено, то объявляется ничья. 
// Для простоты не будем рассматривать диагональные совпадения — только строго вертикальные и строго горизонтальные.

// Изначально всё поле инициализируется символом пробела — ‘ ‘(для обозначения пробела кавычки одинарные и в одну сторону). 
// Это можно сделать сразу при объявлении либо с помощью вложенного цикла. 
// На каждом ходе при занятой клетке или при неверных координатах этой клетки должно быть выведено сообщение, и игрок должен указать координаты клетки повторно. 
// После каждого хода надо выводить в консоль текущее состояние всего игрового поля для наглядности.

#include <iostream>

void print(char field[][6]){
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 6; j++){
            std::cout << field[i][j];
        }
        std::cout << std::endl;
    }
}

bool win (bool BF[][3], std::string player) {
    if ((BF[0][0] && BF[1][0] && BF[2][0])
            || (BF[0][1] && BF[1][1] && BF[2][1])
            || (BF[0][2] && BF[1][2] && BF[2][2])
            || (BF[0][0] && BF[0][1] && BF[0][2])
            || (BF[1][0] && BF[1][1] && BF[1][2])
            || (BF[2][0] && BF[2][1] && BF[2][2])
            || (BF[0][0] && BF[1][1] && BF[2][2])
            || (BF[0][2] && BF[1][1] && BF[2][0])) {
        std::cout << player << " win!";
        return true;
    }
    return false;
}

bool draw (bool BF[][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j =0; j < 3; j++){
            if(!BF[i][j]) return false;
        }
    }
    std::cout << "Draw!";
    return true;
}

int main() {
    char charField[6][6] {{' ', '1', ' ', '2', ' ', '3'},
                          {'1', ' ', '|', ' ', '|', ' '},
                          {' ', '-', '+', '-', '+', '-'},
                          {'2', ' ', '|', ' ', '|', ' '},
                          {' ', '-', '+', '-', '+', '-'},
                          {'3', ' ', '|', ' ', '|', ' '}};
    bool boolField[3][3] {{false, false, false},
                          {false, false, false},
                          {false, false, false}};
    int coordinates[3] {1, 3, 5};
    std::string player = "First player";
    while(!win(boolField, player) && !draw(boolField)){
        print(charField);
    }
}